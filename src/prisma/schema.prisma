datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

enum CategoryType {
  HOME
  REMOTE
  OFFICE
}

enum SetupCategory {
  HOME_OFFICE
  OFFICE
  REMOTE_WORK
}

enum SetupStatus {
  DRAFT
  PUBLISHED
}

enum UserRole {
  USER
  ADMIN
}

enum ProConType {
  PROS
  CONS
}

enum SetupDifficulty {
  EASY
  MEDIUM
  HARD
}

model Subcategory {
  id           String                 @id @default(cuid())
  name         String
  slug         String
  fullSlug     String                 @unique
  description  String?
  categoryType CategoryType
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  products     ProductToSubcategory[]

  @@unique([categoryType, slug])
}

model Tag {
  id        String         @id @default(cuid())
  name      String         @unique
  slug      String         @unique
  products  ProductToTag[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model ProductToTag {
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String
  createdAt DateTime @default(now())

  @@id([productId, tagId])
  @@index([tagId])
  @@index([productId])
}

model Product {
  id                String                    @id @default(cuid())
  title             String
  description       String
  price             Float
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  createdBy         User                      @relation(fields: [userId], references: [id])
  userId            String
  reviews           Review[]
  subcategories     ProductToSubcategory[]
  categories        ProductToCategory[]
  originalStoreLink String
  isReported        Boolean                   @default(false)
  reportCount       Int                       @default(0)
  reportReason      String?
  moderatedBy       String?
  moderatedAt       DateTime?
  images            ProductImage[]
  tags              ProductToTag[]
  brand             String?
  model             String?
  dimensions        ProductDimension[]
  technicalFeatures ProductTechnicalFeature[]
  prosCons          ProductProCon[]
  userExperience    ProductUserExperience?
  SetupProduct      SetupProduct[]
  deletedAt         DateTime?

  @@index([deletedAt])
}

model ProductDimension {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  name      String
  value     String
  unit      String?
  createdAt DateTime @default(now())

  @@index([productId])
}

model ProductTechnicalFeature {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  name      String
  value     String
  createdAt DateTime @default(now())

  @@index([productId])
}

model ProductProCon {
  id        String     @id @default(cuid())
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  text      String
  type      ProConType
  createdAt DateTime   @default(now())

  @@index([productId])
}

model ProductUserExperience {
  id               String          @id @default(cuid())
  productId        String          @unique
  product          Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  setupDifficulty  SetupDifficulty
  assemblyRequired Boolean         @default(false)
  toolsNeeded      String[]
  compatibility    String[]
  userManualLink   String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([productId])
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  fileName  String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model ProductToSubcategory {
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  subcategoryId String
  createdAt     DateTime    @default(now())

  @@id([productId, subcategoryId])
  @@index([subcategoryId])
  @@index([productId])
}

model ProductToCategory {
  product      Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  categoryType CategoryType
  createdAt    DateTime     @default(now())

  @@id([productId, categoryType])
  @@index([productId])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String?
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  reviews       Review[]
  setups        Setup[]
  articles      Article[]
  role          UserRole  @default(USER)
  bio           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Setup {
  id          String         @id @default(cuid())
  userId      String
  category    SetupCategory
  title       String
  description String?
  imageUrl    String?
  status      SetupStatus    @default(DRAFT)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id])
  products    SetupProduct[]

  @@unique([userId, category])
  @@index([userId])
  @@index([status])
  @@index([category])
}

model SetupProduct {
  id        String   @id @default(cuid())
  setupId   String
  productId String
  order     Int      @default(0)
  createdAt DateTime @default(now())

  setup   Setup   @relation(fields: [setupId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([setupId, productId])
  @@index([setupId])
  @@index([productId])
}

model Article {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([identifier, token])
}

model SearchAnalytics {
  id            Int      @id @default(autoincrement())
  query         String // Search query text
  resultCount   Int?     @default(0) @map("result_count") // Number of results
  userId        String?  @map("user_id") // Optional user ID
  searchContext String?  @default("unknown") @map("search_context") // Where search happened
  createdAt     DateTime @default(now()) @map("created_at")

  @@index([query])
  @@index([createdAt(sort: Desc)])
  @@map("SearchAnalytics")
}
